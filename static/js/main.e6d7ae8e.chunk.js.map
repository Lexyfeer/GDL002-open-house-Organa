{"version":3,"sources":["components/Logo.png","components/Brackets.png","components/Navbar.js","components/QRCode.js","components/Date.js","components/Students.js","components/Admin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","src","Logo","width","height","class","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","react_router_dom","to","QRCode","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","delay","result","date","moment","format","handleScan","bind","assertThisInitialized","data","setState","err","console","error","lib_default","style","onError","handleError","onScan","Component","Date","React","StudentsDB","title","components_QRCode","Date_Date","Brackets","AdminDB","App","components_Navbar","react_router","exact","path","render","Students","Admin","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6d7ae8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.6db60334.png\";","module.exports = __webpack_public_path__ + \"static/media/Brackets.118ebff9.png\";","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Logo from './Logo.png'\n\n\nconst Navbar = () => (\n\n<nav className=\"navbar navbar-expand-lg\">\n<img src={Logo} className=\"logoLink\" width=\"150\" height=\"50\" class=\"d-inline-block align-top\" alt=\"logo\" />\n  <button className=\"navbar-light navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n  <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n    <div className=\"navbar-nav\">\n    <ul className=\"navbar-nav\">\n          <li><NavLink className=\"navMenuLink\" to=\"./Students\"> Estudiante </NavLink></li>\n          <li><NavLink className=\"navMenuLink\" to=\"./Admin\"> Administraci√≥n </NavLink></li>\n      </ul>\n    </div>\n  </div>\n</nav>\n);\n\nexport default Navbar;","\nimport React, { Component } from 'react';\nimport QrReader from 'react-qr-scanner';\nimport moment from 'moment';\n\n \nclass QRCode extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      delay: 100,\n      result: 'No result',\n      date:moment().format('LLLL'),\n    };\n \n    this.handleScan = this.handleScan.bind(this)\n  }\n  handleScan(data){\n    this.setState({\n      result: data,\n    });\n\n    // db.collection(\"organa-1020\").doc(\"Attendance\").set({\n    //   name: data,\n    //   date:moment().format('LLLL'),\n\n    // })\n    // .then(function() {\n    //     console.log(\"Document successfully written!\");\n\n    // })\n    // .catch(function(error) {\n    //     console.error(\"Error writing document: \", error);\n    // });\n  \n  \n  };\n\n  handleError(err){\n    console.error(err)\n  }\n  render(){\n    const previewStyle = {\n      width: 320,\n    }\n \n    return(\n      <div className= \"video\"> \n        <QrReader \n          className= \"canvas\"\n          delay={this.state.delay}\n          style={previewStyle}\n          onError={this.handleError}\n          onScan={this.handleScan}\n          />\n        <p>{this.state.result}</p>\n      </div>\n    )\n  }\n}\n\nexport default QRCode;\n\n","import React from 'react';\nimport moment from 'moment';\n\n\n\n\nexport default class Date extends React.Component {\n    render() {\n        return (\n            <h5>\n               \n                {moment().format('LLLL')}\n            </h5>\n        );\n    }\n}\n ","import React from \"react\";\nimport QRCode from \"./QRCode\";\nimport Date from \"./Date\";\nimport Brackets from './Brackets.png'\n\n// import firebase from '../firebase/firebase';\n\nconst StudentsDB = props => (\n    <div>\n  <div className=\"container2\">\n      \n    <div className=\"row\">\n      <div className=\"qr\">\n      <h1>{props.title}</h1>\n        <QRCode />\n        <Date />\n      </div>\n    </div>\n  </div>\n  <div className=\"arrow-img-container\">\n  <img src={Brackets} className=\"logoLink\" width=\"150\" height=\"120\" class=\"d-inline-block\" alt=\"logo\" />\n  </div>\n  </div>\n  \n);\n\n\nexport default StudentsDB;\n","import React from 'react';\n// import firebase from '../firebase/firebase';\n\nconst AdminDB = (props) => (\n    <div className=\"mainContent\">\n        <div className=\"container\">\n            <h2>{props.title}</h2>\n            <h3>Bienvenidx al control de asistencias Laboratoria Bootcamp 2019</h3>\n        </div>\n    </div>\n);\n\nexport default AdminDB;","import React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Navbar from './components/Navbar';\nimport StudentsDB from './components/Students';\nimport AdminDB from './components/Admin';\nimport Students from './components/Students';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Route exact path=\"/Students\" render={ () => <StudentsDB title=\"Registro de asistencia\" />} />\n        <Route exact path=\"/Admin\" render={ () => <AdminDB title=\"Control de asistencias\" />} />\n      </div>\n    </HashRouter>\n    \n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}